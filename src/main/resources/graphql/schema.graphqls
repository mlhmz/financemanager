scalar LocalDateTime

type Transaction {
    uuid: ID
    title: String
    description: String
    amount: Float
    timestamp: LocalDateTime
    category: Category
    sheet: Sheet
}

type Category {
    uuid: ID
    title: String
    description: String
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}

type Sheet {
    uuid: ID
    title: String
    createdAt: LocalDateTime
    updatedAt: LocalDateTime
}

input TransactionFilter {
    sheetId: ID
    categoryId: ID
}

input TransactionCreateMutation {
    title: String! @constraint(minLength: 1)
    description: String! @constraint(minLength: 1)
    amount: Float!
    timestamp: LocalDateTime!
    sheetId: ID!
    categoryId: ID!
}

input TransactionUpdateMutation {
    title: String
    description: String
    amount: Float
    timestamp: LocalDateTime
    sheetId: ID
    categoryId: ID
}

input TransactionCategoryUpdate {
    transactionUuid: ID
    categoryUuid: ID
}

input MoveTransactionToSheetUpdate {
    transactionUuid: ID
    sheetUuid: ID
}

schema {
    query: Query
    mutation: Mutation
}

type Query {
    findAllTransactions(filter: TransactionFilter): [Transaction]
    findTransactionByUUID(uuid: ID!): Transaction
}

type Mutation {
    createTransaction(payload: TransactionCreateMutation!): Transaction
    updateTransactionByUUID(uuid: ID!, payload: TransactionUpdateMutation!): Transaction
    updateTransactionCategory(payload: TransactionCategoryUpdate!): Transaction
    moveTransactionToSheet(payload: MoveTransactionToSheetUpdate!): Transaction
    deleteTransactionByUUID(uuid: ID!): Boolean
}

directive @constraint(
    # String constraints
    minLength: Int
    maxLength: Int
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    pattern: String
    format: String
    # Number constraints
    min: Float
    max: Float
    exclusiveMin: Float
    exclusiveMax: Float
    multipleOf: Float
    uniqueTypeName: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION